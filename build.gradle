buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "de.richsource.gradle.plugins:gwt-gradle-plugin:$gwtGradlePluginVersion"
    }
}

apply plugin: "java"
apply plugin: "war"
apply plugin: "gwt-compiler"

sourceCompatibility = 1.8
version = projectVersion

repositories {
    jcenter();
    mavenLocal();
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "http://4thline.org/m2"
    }
    maven {
        url "http://maven2.gueck.com/releases"
    }
    maven {
        url "http://nexus.seamless.org/content/groups/public/"
    }
}

configurations {
    serverDependencies
    clientDependencies.extendsFrom serverDependencies
    compile.extendsFrom clientDependencies
}

dependencies {
    serverDependencies "org.openremote:or-shared:$orSharedVersion"
    serverDependencies "org.openremote:or-zwave:$orZwaveVersion"
    
    serverDependencies "javax.jmdns:jmdns:$jmDNSVersion"

    serverDependencies "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    serverDependencies "org.slf4j:jul-to-slf4j:$slf4jVersion"
    serverDependencies "ch.qos.logback:logback-classic:$logbackVersion"
    serverDependencies "mikaelhg:urlbuilder:$urlbuilderVersion"

    serverDependencies "io.undertow:undertow-servlet:$undertowVersion"
    serverDependencies "io.undertow:undertow-websockets-jsr:$undertowVersion"
    serverDependencies "org.jboss.logging:jboss-logging-processor:$jbossLoggingProcessVersion"

    serverDependencies "org.apache.camel:camel-core:$camelVersion"
    serverDependencies "org.apache.camel:camel-servlet:$camelVersion"
    serverDependencies "org.apache.camel:camel-ahc-ws:$camelVersion"
    serverDependencies "org.apache.camel:camel-jackson:$camelVersion"
    serverDependencies "org.apache.camel:camel-script:$camelVersion"
    serverDependencies "org.apache.camel:camel-groovy:$camelVersion"
    serverDependencies "org.apache.camel:camel-spring:$camelVersion"
    serverDependencies "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    serverDependencies "org.fourthline.cling:cling-core:$clingVersion"

    serverDependencies "com.h2database:h2:$h2Version"
    serverDependencies "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    serverDependencies("org.codehaus.btm:btm:$bitronixVersion") {
        exclude group: "javax.transaction" // CDDL of jta-1.1.jar is incompatible with GPL!
    }
    serverDependencies "org.apache.geronimo.specs:geronimo-jta_1.1_spec:$jtaSpecVersion"

    clientDependencies "com.google.gwt:gwt-user:$gwtVersion"
    clientDependencies "com.google.gwt:gwt-elemental:$gwtVersion"
    clientDependencies "com.ahome-it:lienzo-core:$lienzoVersion"
    clientDependencies "org.fusesource.restygwt:restygwt:$restygwtVersion"
    clientDependencies "com.google.guava:guava-gwt:$guavagwtVersion"

    gwt("ru.finam:slf4j-gwt:$slf4jGwtVersion") {
        exclude group: "com.google.gwt"
    }

    testCompile "org.testng:testng:$testngVersion"
    testCompile ("org.apache.camel:camel-testng:$camelVersion") {
        exclude group:"org.apache.camel", module: "camel-spring"
        exclude group:"org.apache.camel", module: "camel-test-spring"
    }
}

task serverRun(type: JavaExec, dependsOn: "classes") {
    main = "org.openremote.server.Server"
    classpath = sourceSets.main.runtimeClasspath
}

gwt {
    gwtVersion = project.properties.gwtVersion

    sourceLevel = JavaVersion.VERSION_1_8
    maxHeapSize = "1024M"

    modules("org.openremote.Client")

    test {
        hasGwtTests = false
    }

    compiler {
        style = "PRETTY"
    }

    superDev {

        // Generate minimal JS launcher in the webapp source folder (you might commit this or not, doesn't matter)
        launcherDir = file("src/main/webapp/gwt")

        // Careful, this binds to all interfaces on your machine!
        bindAddress = "0.0.0.0"
    }
}

// TODO Why is this not configurable?
tasks.withType(de.richsource.gradle.plugins.gwt.AbstractGwtActionTask) {

    doFirst {
        mkdir file("src/main/webapp/gwt")
    }

    //args "-logLevel", "TRACE"
    args "-generateJsInteropExports"
    args "-noincremental" // TODO Yep, incremental compile is apparently broken right now in 2.8.0

    // I've had various problems with this cache and GWT snapshot updates, so it's a good idea to make it easily cleanable
    jvmArgs("-Dgwt.persistentunitcachedir=$project.buildDir/gwt/cache")
}

test {
    dependsOn testClasses
    useTestNG() {
        suites "src/test/AllTests.tng.xml"
    }
    // TODO https://github.com/steffenschaefer/gwt-gradle-plugin/issues/89
    classpath = project.sourceSets.test.runtimeClasspath.filter {
        !it.absolutePath.contains("ru.finam")
    }
}

/* TODO Remove this if we don't need APT
compileJava {
    // This configures the annotation processing tool in javac to use a separate output
    // directory for generated source - the default is the same as for .class files. We
    // need them in a different folder so we can add it as a source path in the IDE and
    // still hide the .class/binary directories. This sucks, Gradle sucks.
    def generatedSourceDirectory = "$project.buildDir/generated-source-apt"

    doFirst {
        if (new File(generatedSourceDirectory).exists()) {
            delete generatedSourceDirectory
        }
        new File(generatedSourceDirectory).mkdirs()
    }

    sourceSets.main.java {
        srcDir generatedSourceDirectory
    }

    it.options.compilerArgs += ['-s', generatedSourceDirectory]
}
*/


jar {
    exclude("org/openremote/client")
    exclude("**/*.gwt.xml")
    archiveName = "${rootProject.name}-server.jar"
}

war.enabled = false
task assembleClient(type: Jar) {
    dependsOn "compileGwt"
    from(webAppDir) {
        exclude "gwt"
    }
    from("${project.buildDir}/gwt/out") {
        exclude "WEB-INF"
        into "gwt"
    }
    archiveName = "${rootProject.name}-client.jar"
}

task build(type: Copy, overwrite: true) {
    dependsOn("check", "assemble", "jar", "assembleClient")
    into libsDir
    from configurations.serverDependencies.files
}
